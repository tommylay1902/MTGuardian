version: '3'
services:
  account:
    container_name: account
    build:
      context: ./backend/account
      dockerfile: Dockerfile
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: account
      GORM_HOST: DB
      PORT: 8081
    ports:
      - "8002:8080" 
    tty: true
    networks: 
      - db
    depends_on:
      dbaccount: 
        condition: service_healthy
    restart: unless-stopped
  prescription:
    container_name: prescription
    build:
      context: ./backend/prescription
      dockerfile: Dockerfile
    # env_file:
    #   - ./backend/prescription/.env
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: prescription
      GORM_HOST: DB
      PORT: 8080
    ports:
      - "8000:8080" 
    tty: true
    networks: 
      - db
    depends_on:
      dbprescription: #connects to the service 'dbprescription' over the 'db' network
        condition: service_healthy
    restart: unless-stopped
  
  dbprescription:
    container_name: dbprescription
    image: postgres:15.3 # Use the official PostgreSQL image
    ports:
      - "8001:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password 
      POSTGRES_DB: prescription
      GORM_HOST: DB
    networks:
      - db
    volumes:
      - data:/var/lib/postgresql/data
      - ./initdb:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d prescription"]
      interval: 10s
      timeout: 5s
      retries: 5

  dbaccount:
    container_name: dbaccount
    image: postgres:15.3 # Use the official PostgreSQL image
    ports:
      - "8003:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password 
      POSTGRES_DB: account
      GORM_HOST: DB
    networks:
      - db
    volumes:
      - data:/var/lib/postgresql/data
      - ./initdb:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d account"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  db:
    driver: bridge

volumes:
  data:
    driver: local